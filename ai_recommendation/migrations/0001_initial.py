# Generated by Django 5.1.11 on 2025-08-31 10:16

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("main", "0009_robotsrule_searchkeyword_seoaudit_seometadata_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="RecommendationModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                (
                    "model_type",
                    models.CharField(
                        choices=[
                            ("collaborative", "협업 필터링"),
                            ("content_based", "콘텐츠 기반"),
                            ("hybrid", "하이브리드"),
                            ("deep_learning", "딥러닝"),
                            ("matrix_factorization", "행렬 분해"),
                        ],
                        max_length=30,
                    ),
                ),
                ("version", models.CharField(max_length=20)),
                ("parameters", models.JSONField(default=dict)),
                ("hyperparameters", models.JSONField(default=dict)),
                ("accuracy", models.FloatField(blank=True, null=True)),
                ("precision", models.FloatField(blank=True, null=True)),
                ("recall", models.FloatField(blank=True, null=True)),
                ("f1_score", models.FloatField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=False)),
                ("is_trained", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("trained_at", models.DateTimeField(blank=True, null=True)),
                ("last_used_at", models.DateTimeField(blank=True, null=True)),
            ],
            options={
                "db_table": "recommendation_models",
                "ordering": ["-created_at"],
                "indexes": [
                    models.Index(
                        fields=["is_active", "is_trained"],
                        name="recommendat_is_acti_4bf224_idx",
                    ),
                    models.Index(
                        fields=["model_type", "version"],
                        name="recommendat_model_t_01b70a_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="AcademySimilarity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_similarity",
                    models.FloatField(default=0.0, verbose_name="콘텐츠 유사도"),
                ),
                (
                    "location_similarity",
                    models.FloatField(default=0.0, verbose_name="위치 유사도"),
                ),
                (
                    "user_similarity",
                    models.FloatField(default=0.0, verbose_name="사용자 기반 유사도"),
                ),
                (
                    "overall_similarity",
                    models.FloatField(default=0.0, verbose_name="전체 유사도"),
                ),
                (
                    "calculation_method",
                    models.CharField(default="cosine", max_length=50),
                ),
                ("calculated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy1",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="similarities_as_first",
                        to="main.data",
                    ),
                ),
                (
                    "academy2",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="similarities_as_second",
                        to="main.data",
                    ),
                ),
            ],
            options={
                "db_table": "academy_similarities",
                "indexes": [
                    models.Index(
                        fields=["academy1", "overall_similarity"],
                        name="academy_sim_academy_0f8526_idx",
                    ),
                    models.Index(
                        fields=["academy2", "overall_similarity"],
                        name="academy_sim_academy_08b8cc_idx",
                    ),
                    models.Index(
                        fields=["overall_similarity"],
                        name="academy_sim_overall_f89db1_idx",
                    ),
                ],
                "constraints": [
                    models.CheckConstraint(
                        condition=models.Q(("academy1__lt", models.F("academy2"))),
                        name="academy_similarity_order_constraint",
                    )
                ],
                "unique_together": {("academy1", "academy2")},
            },
        ),
        migrations.CreateModel(
            name="AcademyVector",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("subject_vector", models.JSONField(default=dict)),
                ("location_vector", models.JSONField(default=dict)),
                ("price_vector", models.JSONField(default=dict)),
                ("quality_vector", models.JSONField(default=dict)),
                ("facility_vector", models.JSONField(default=dict)),
                (
                    "popularity_score",
                    models.FloatField(default=0.0, verbose_name="인기도"),
                ),
                ("rating_score", models.FloatField(default=0.0, verbose_name="평점")),
                (
                    "engagement_score",
                    models.FloatField(default=0.0, verbose_name="참여도"),
                ),
                ("description_embedding", models.JSONField(blank=True, default=list)),
                ("keyword_embedding", models.JSONField(blank=True, default=list)),
                ("vector_version", models.CharField(default="1.0", max_length=20)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vector",
                        to="main.data",
                    ),
                ),
            ],
            options={
                "db_table": "academy_vectors",
                "indexes": [
                    models.Index(
                        fields=["popularity_score"],
                        name="academy_vec_popular_8d1380_idx",
                    ),
                    models.Index(
                        fields=["rating_score"], name="academy_vec_rating__f3eae3_idx"
                    ),
                    models.Index(
                        fields=["engagement_score"],
                        name="academy_vec_engagem_383fa1_idx",
                    ),
                    models.Index(
                        fields=["last_updated"], name="academy_vec_last_up_401ef7_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="RecommendationLog",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "log_type",
                    models.CharField(
                        choices=[
                            ("request", "추천 요청"),
                            ("generation", "추천 생성"),
                            ("serving", "추천 제공"),
                            ("feedback", "피드백"),
                            ("error", "오류"),
                        ],
                        max_length=20,
                    ),
                ),
                ("message", models.TextField()),
                ("data", models.JSONField(blank=True, default=dict)),
                (
                    "processing_time",
                    models.FloatField(
                        blank=True, null=True, verbose_name="처리시간(초)"
                    ),
                ),
                (
                    "recommendation_count",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                ("session_id", models.CharField(blank=True, max_length=100)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommendation_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "recommendation_logs",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["user", "log_type", "timestamp"],
                        name="recommendat_user_id_49ca81_idx",
                    ),
                    models.Index(
                        fields=["log_type", "timestamp"],
                        name="recommendat_log_typ_fa7f44_idx",
                    ),
                    models.Index(
                        fields=["session_id"], name="recommendat_session_1470b3_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Recommendation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("confidence_score", models.FloatField(verbose_name="신뢰도")),
                ("relevance_score", models.FloatField(verbose_name="관련성")),
                ("final_score", models.FloatField(verbose_name="최종점수")),
                ("reason_type", models.CharField(blank=True, max_length=50)),
                ("reason_details", models.JSONField(blank=True, default=dict)),
                ("explanation", models.TextField(blank=True)),
                ("context", models.JSONField(blank=True, default=dict)),
                ("session_id", models.CharField(blank=True, max_length=100)),
                ("is_clicked", models.BooleanField(default=False)),
                ("is_contacted", models.BooleanField(default=False)),
                (
                    "feedback_score",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(5),
                        ],
                    ),
                ),
                ("recommended_at", models.DateTimeField(auto_now_add=True)),
                ("clicked_at", models.DateTimeField(blank=True, null=True)),
                (
                    "academy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommendations",
                        to="main.data",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="recommendations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "model",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="ai_recommendation.recommendationmodel",
                    ),
                ),
            ],
            options={
                "db_table": "recommendations",
                "ordering": ["-final_score", "-recommended_at"],
                "indexes": [
                    models.Index(
                        fields=["user", "final_score"],
                        name="recommendat_user_id_f281f3_idx",
                    ),
                    models.Index(
                        fields=["academy", "final_score"],
                        name="recommendat_academy_a49674_idx",
                    ),
                    models.Index(
                        fields=["model", "recommended_at"],
                        name="recommendat_model_i_a6c9e1_idx",
                    ),
                    models.Index(
                        fields=["session_id", "final_score"],
                        name="recommendat_session_25d608_idx",
                    ),
                    models.Index(
                        fields=["is_clicked", "is_contacted"],
                        name="recommendat_is_clic_6dd43d_idx",
                    ),
                ],
                "unique_together": {("user", "academy", "model", "session_id")},
            },
        ),
        migrations.CreateModel(
            name="UserBehavior",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("view", "조회"),
                            ("search", "검색"),
                            ("filter", "필터링"),
                            ("contact", "문의"),
                            ("bookmark", "즐겨찾기"),
                            ("click", "클릭"),
                            ("share", "공유"),
                            ("review", "리뷰"),
                        ],
                        max_length=20,
                    ),
                ),
                ("search_query", models.CharField(blank=True, max_length=500)),
                ("filter_criteria", models.JSONField(blank=True, default=dict)),
                ("session_id", models.CharField(blank=True, max_length=100)),
                ("page_url", models.URLField(blank=True)),
                ("referrer", models.URLField(blank=True)),
                ("user_agent", models.TextField(blank=True)),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "duration",
                    models.PositiveIntegerField(default=0, verbose_name="체류시간(초)"),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "academy",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_behaviors",
                        to="main.data",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="behaviors",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_behaviors",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["user", "action", "timestamp"],
                        name="user_behavi_user_id_6aca5e_idx",
                    ),
                    models.Index(
                        fields=["academy", "action"],
                        name="user_behavi_academy_1eb124_idx",
                    ),
                    models.Index(
                        fields=["session_id", "timestamp"],
                        name="user_behavi_session_ea18c8_idx",
                    ),
                    models.Index(
                        fields=["timestamp"], name="user_behavi_timesta_f7c28a_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="UserPreference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "preference_type",
                    models.CharField(
                        choices=[
                            ("subject", "과목"),
                            ("location", "위치"),
                            ("price", "가격"),
                            ("teaching_method", "교육방식"),
                            ("facility", "시설"),
                            ("schedule", "일정"),
                        ],
                        max_length=20,
                    ),
                ),
                ("preference_value", models.CharField(max_length=200)),
                (
                    "weight",
                    models.FloatField(
                        default=1.0,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(5.0),
                        ],
                        verbose_name="가중치",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="preferences",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "user_preferences",
                "indexes": [
                    models.Index(
                        fields=["user", "preference_type"],
                        name="user_prefer_user_id_98103b_idx",
                    ),
                    models.Index(
                        fields=["preference_type", "weight"],
                        name="user_prefer_prefere_8af406_idx",
                    ),
                ],
                "unique_together": {("user", "preference_type")},
            },
        ),
    ]
