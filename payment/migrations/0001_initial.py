# Generated by Django 5.1.11 on 2025-08-31 10:06

import django.core.validators
import django.db.models.deletion
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("main", "0009_robotsrule_searchkeyword_seoaudit_seometadata_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="PaymentMethod",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, verbose_name="결제수단명")),
                (
                    "payment_type",
                    models.CharField(
                        choices=[
                            ("card", "신용카드"),
                            ("bank_transfer", "계좌이체"),
                            ("virtual_account", "가상계좌"),
                            ("phone", "휴대폰결제"),
                            ("kakao_pay", "카카오페이"),
                            ("naver_pay", "네이버페이"),
                            ("samsung_pay", "삼성페이"),
                            ("payco", "PAYCO"),
                            ("toss", "토스페이"),
                            ("point", "적립금"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        choices=[
                            ("iamport", "아임포트"),
                            ("toss_payments", "토스페이먼츠"),
                            ("kakao_pay", "카카오페이"),
                            ("naver_pay", "네이버페이"),
                            ("nice_pay", "나이스페이"),
                            ("kg_inicis", "KG이니시스"),
                            ("settle", "세틀뱅크"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "fee_rate",
                    models.DecimalField(
                        decimal_places=2,
                        default=Decimal("0.00"),
                        max_digits=5,
                        validators=[
                            django.core.validators.MinValueValidator(Decimal("0.00")),
                            django.core.validators.MaxValueValidator(Decimal("10.00")),
                        ],
                        verbose_name="수수료율(%)",
                    ),
                ),
                (
                    "fixed_fee",
                    models.PositiveIntegerField(
                        default=0, verbose_name="고정수수료(원)"
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_default", models.BooleanField(default=False)),
                (
                    "min_amount",
                    models.PositiveIntegerField(
                        default=1000, verbose_name="최소결제금액"
                    ),
                ),
                (
                    "max_amount",
                    models.PositiveIntegerField(
                        default=10000000, verbose_name="최대결제금액"
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "db_table": "payment_methods",
                "ordering": ["payment_type", "name"],
                "indexes": [
                    models.Index(
                        fields=["payment_type", "is_active"],
                        name="payment_met_payment_2c880e_idx",
                    ),
                    models.Index(
                        fields=["provider"], name="payment_met_provide_3b2f83_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="Payment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "payment_id",
                    models.CharField(db_index=True, max_length=100, unique=True),
                ),
                ("merchant_uid", models.CharField(max_length=100, unique=True)),
                ("imp_uid", models.CharField(blank=True, max_length=100)),
                (
                    "service_type",
                    models.CharField(
                        choices=[
                            ("course_fee", "수강료"),
                            ("registration_fee", "등록비"),
                            ("material_fee", "교재비"),
                            ("exam_fee", "시험비"),
                            ("consultation_fee", "상담비"),
                            ("premium_listing", "프리미엄 등록"),
                            ("advertisement", "광고"),
                        ],
                        max_length=50,
                    ),
                ),
                ("amount", models.PositiveIntegerField(verbose_name="결제금액")),
                (
                    "discount_amount",
                    models.PositiveIntegerField(default=0, verbose_name="할인금액"),
                ),
                (
                    "fee_amount",
                    models.PositiveIntegerField(default=0, verbose_name="수수료"),
                ),
                (
                    "final_amount",
                    models.PositiveIntegerField(verbose_name="최종결제금액"),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "결제대기"),
                            ("processing", "결제진행중"),
                            ("completed", "결제완료"),
                            ("failed", "결제실패"),
                            ("cancelled", "결제취소"),
                            ("partial_refunded", "부분환불"),
                            ("refunded", "전액환불"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("buyer_name", models.CharField(max_length=100)),
                ("buyer_email", models.EmailField(max_length=254)),
                ("buyer_phone", models.CharField(max_length=20)),
                ("buyer_addr", models.CharField(blank=True, max_length=255)),
                ("buyer_postcode", models.CharField(blank=True, max_length=10)),
                ("product_name", models.CharField(max_length=200)),
                ("product_description", models.TextField(blank=True)),
                ("pg_response", models.JSONField(blank=True, default=dict)),
                ("failure_reason", models.TextField(blank=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("paid_at", models.DateTimeField(blank=True, null=True)),
                ("cancelled_at", models.DateTimeField(blank=True, null=True)),
                ("receipt_url", models.URLField(blank=True)),
                ("notes", models.TextField(blank=True)),
                (
                    "academy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to="main.data",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="payments",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "payment_method",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="payment.paymentmethod",
                    ),
                ),
            ],
            options={
                "db_table": "payments",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentRefund",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("refund_id", models.CharField(max_length=100, unique=True)),
                (
                    "refund_type",
                    models.CharField(
                        choices=[("full", "전액환불"), ("partial", "부분환불")],
                        max_length=20,
                    ),
                ),
                ("refund_amount", models.PositiveIntegerField(verbose_name="환불금액")),
                ("refund_reason", models.TextField(verbose_name="환불사유")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("requested", "환불요청"),
                            ("processing", "환불처리중"),
                            ("completed", "환불완료"),
                            ("failed", "환불실패"),
                            ("rejected", "환불거부"),
                        ],
                        default="requested",
                        max_length=20,
                    ),
                ),
                ("pg_refund_response", models.JSONField(blank=True, default=dict)),
                ("rejection_reason", models.TextField(blank=True)),
                ("requested_at", models.DateTimeField(auto_now_add=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "payment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="refunds",
                        to="payment.payment",
                    ),
                ),
                (
                    "processed_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="processed_refunds",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "requested_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="requested_refunds",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "payment_refunds",
                "ordering": ["-requested_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentStatistics",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("total_payments", models.PositiveIntegerField(default=0)),
                ("total_amount", models.PositiveBigIntegerField(default=0)),
                ("successful_payments", models.PositiveIntegerField(default=0)),
                ("failed_payments", models.PositiveIntegerField(default=0)),
                ("cancelled_payments", models.PositiveIntegerField(default=0)),
                ("total_refunds", models.PositiveIntegerField(default=0)),
                ("refund_amount", models.PositiveBigIntegerField(default=0)),
                ("card_payments", models.PositiveIntegerField(default=0)),
                ("card_amount", models.PositiveBigIntegerField(default=0)),
                ("transfer_payments", models.PositiveIntegerField(default=0)),
                ("transfer_amount", models.PositiveBigIntegerField(default=0)),
                ("mobile_payments", models.PositiveIntegerField(default=0)),
                ("mobile_amount", models.PositiveBigIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.data",
                    ),
                ),
            ],
            options={
                "db_table": "payment_statistics",
                "ordering": ["-date"],
            },
        ),
        migrations.CreateModel(
            name="PaymentSubscription",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("subscription_id", models.CharField(max_length=100, unique=True)),
                ("plan_name", models.CharField(max_length=100)),
                (
                    "billing_cycle",
                    models.CharField(
                        choices=[
                            ("monthly", "월간"),
                            ("quarterly", "분기"),
                            ("yearly", "연간"),
                        ],
                        max_length=20,
                    ),
                ),
                ("amount", models.PositiveIntegerField(verbose_name="구독료")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "활성"),
                            ("paused", "일시정지"),
                            ("cancelled", "취소"),
                            ("expired", "만료"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("start_date", models.DateTimeField()),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("next_billing_date", models.DateTimeField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "academy",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to="main.data",
                    ),
                ),
                (
                    "last_payment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to="payment.payment",
                    ),
                ),
                (
                    "payment_method",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="payment.paymentmethod",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="subscriptions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "db_table": "payment_subscriptions",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PaymentWebhook",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("webhook_id", models.CharField(max_length=100, unique=True)),
                ("provider", models.CharField(max_length=50)),
                ("event_type", models.CharField(max_length=50)),
                ("raw_data", models.JSONField()),
                ("processed_data", models.JSONField(blank=True, default=dict)),
                ("is_processed", models.BooleanField(default=False)),
                ("processing_error", models.TextField(blank=True)),
                ("retry_count", models.PositiveSmallIntegerField(default=0)),
                ("received_at", models.DateTimeField(auto_now_add=True)),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "payment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="webhooks",
                        to="payment.payment",
                    ),
                ),
            ],
            options={
                "db_table": "payment_webhooks",
                "ordering": ["-received_at"],
            },
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["payment_id"], name="payments_payment_2d1dd8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["merchant_uid"], name="payments_merchan_75f493_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(fields=["imp_uid"], name="payments_imp_uid_60b8ee_idx"),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["user", "status"], name="payments_user_id_1b771c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["academy", "status"], name="payments_academy_41a223_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="payment",
            index=models.Index(
                fields=["status", "created_at"], name="payments_status_426d4f_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentrefund",
            index=models.Index(
                fields=["refund_id"], name="payment_ref_refund__493500_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentrefund",
            index=models.Index(
                fields=["payment", "status"], name="payment_ref_payment_94e4ed_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentrefund",
            index=models.Index(
                fields=["status", "requested_at"], name="payment_ref_status_5e46a4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentstatistics",
            index=models.Index(fields=["date"], name="payment_sta_date_dd51c8_idx"),
        ),
        migrations.AddIndex(
            model_name="paymentstatistics",
            index=models.Index(
                fields=["academy", "date"], name="payment_sta_academy_b4973d_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="paymentstatistics",
            unique_together={("date", "academy")},
        ),
        migrations.AddIndex(
            model_name="paymentsubscription",
            index=models.Index(
                fields=["subscription_id"], name="payment_sub_subscri_3fabd1_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentsubscription",
            index=models.Index(
                fields=["user", "status"], name="payment_sub_user_id_c1d1fb_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentsubscription",
            index=models.Index(
                fields=["status", "next_billing_date"],
                name="payment_sub_status_a973d6_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="paymentwebhook",
            index=models.Index(
                fields=["provider", "event_type"], name="payment_web_provide_e7082c_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="paymentwebhook",
            index=models.Index(
                fields=["is_processed", "received_at"],
                name="payment_web_is_proc_c020d9_idx",
            ),
        ),
    ]
